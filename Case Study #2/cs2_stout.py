# -*- coding: utf-8 -*-
"""CS2_Stout.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13vIRVIxu_knsGCM0K2NwqYQBmPpArt8i
"""

import pandas as pd
import numpy as np
# import seaborn as sns
# sns.set(font_scale=4)
# import matplotlib.pyplot as plt
# %matplotlib inline
import os
import warnings
warnings.filterwarnings("ignore")

path = os.getcwd()

ds = pd.read_csv(os.path.join(path, 'casestudy.csv'))
ds.shape

ds.head()

ds = ds.drop(columns=['Unnamed: 0'])

ds.head()

from sqlalchemy import create_engine
engine = create_engine('sqlite://', echo=False)

ds.to_sql('rev', con=engine)

"""## Total revenue for the current year

"""

tot_rev_yearly = pd.DataFrame(engine.execute("""
SELECT year, SUM(net_revenue) as yearly_revenue
    FROM rev
    GROUP BY year
    ORDER BY year
""").fetchall())

tot_rev_yearly

"""## New Customer Revenue e.g. new customers not present in previous year only

"""

new_customer_revenue = pd.DataFrame(engine.execute(
"""
WITH prev_year_cust AS (
    SELECT DISTINCT customer_email as email, MIN(year) as first_year
    FROM rev
    GROUP BY customer_email
    ORDER BY MIN(year)
) SELECT prev_year_cust.first_year as year_, SUM(net_revenue) as new_customer_revenue
    FROM rev, prev_year_cust
    WHERE customer_email=prev_year_cust.email and year = prev_year_cust.first_year
    GROUP BY year_
"""
).fetchall())
new_customer_revenue

"""## Existing Customer Growth
To calculate this, use the Revenue of existing customers for current year â€“(minus) Revenue of existing customers from the previous year

"""

pvt_table = pd.pivot_table(ds, values='net_revenue', index='customer_email', columns='year')
pvt_table.to_sql('pvt_table', con=engine)
pd.DataFrame(engine.execute("select * from pvt_table").fetchall())

exist_cust_growth = pd.DataFrame(engine.execute("""
WITH g16 AS (
    SELECT SUM([2016] - [2015]) AS diff16 FROM pvt_table WHERE [2016] IS NOT NULL AND [2015] IS NOT NULL),
g17 AS (SELECT SUM([2017] - [2016]) AS diff17 FROM pvt_table WHERE [2016] IS NOT NULL AND [2017] IS NOT NULL)
SELECT 0 AS '2015', diff16 as '2016', diff17 as '2017'
FROM g16, g17
    """).fetchall())
exist_cust_growth

# Existing customer growth is pretty stable year on year

"""## Revenue lost from attrition

"""

rev_lost_attrition = pd.DataFrame(engine.execute("""
WITH g15 AS (SELECT SUM([2015]) AS a15 FROM pvt_table WHERE [2015] IS NOT NULL AND [2016] IS NULL),
g16 AS (SELECT SUM([2016]) AS a16 FROM pvt_table WHERE [2016] IS NOT NULL AND [2017] IS NULL)
SELECT 0 AS '2015', a15 as '2016', a16 as '2017'
FROM g16, g15
    """).fetchall())
rev_lost_attrition

# The revenue lost from attrition is almost as huge as the total revenue, indicating that revenue could have been double the current amount if customers were retained.

"""## Existing Customer Revenue Current Year

"""

exist_cust_rev_curr_year = pd.DataFrame(engine.execute("""
WITH g15 AS (SELECT SUM([2015]) AS a15 FROM pvt_table),
g16 AS (SELECT SUM([2016]) AS a16 FROM pvt_table WHERE [2015] IS NOT NULL AND [2016] IS NOT NULL),
g17 AS (SELECT SUM([2017]) AS a17 FROM pvt_table WHERE [2016] IS NOT NULL AND [2017] IS NOT NULL)
SELECT a15 as '2015', a16 as '2016', a17 as '2017'
FROM  g15, g16, g17
    """).fetchall())
exist_cust_rev_curr_year

# Existing customer revenue seems to be falling down year on year

"""## Existing Customer Revenue Prior Year

"""

exist_cust_rev_prior_year = pd.DataFrame(engine.execute("""
WITH g16 AS (SELECT SUM([2015]) AS a16 FROM pvt_table WHERE [2015] IS NOT NULL AND [2016] IS NOT NULL),
g17 AS (SELECT SUM([2016]) AS a17 FROM pvt_table WHERE [2016] IS NOT NULL AND [2017] IS NOT NULL)
SELECT 0 as '2015', a16 as '2016', a17 as '2017'
FROM g16, g17
    """).fetchall())
exist_cust_rev_prior_year

"""## Total Customers Current Year

"""

tot_cust_curr_year = pd.DataFrame(engine.execute("""
WITH g15 AS (SELECT COUNT(customer_email) AS a15 FROM pvt_table WHERE [2015] IS NOT NULL),
g16 AS (SELECT COUNT(customer_email) AS a16 FROM pvt_table WHERE [2016] IS NOT NULL),
g17 AS (SELECT COUNT(customer_email) AS a17 FROM pvt_table WHERE [2017] IS NOT NULL)
SELECT a15 as '2015', a16 as '2016', a17 as '2017'
FROM  g15, g16, g17
    """).fetchall())
tot_cust_curr_year

# Number of customers see a dip in 2016 before rising back in 2017

"""## Total Customers Previous Year

"""

tot_cust_prev_year = pd.DataFrame(engine.execute("""
WITH g16 AS (SELECT COUNT(customer_email) AS a16 FROM pvt_table WHERE [2015] IS NOT NULL),
g17 AS (SELECT COUNT(customer_email) AS a17 FROM pvt_table WHERE [2016] IS NOT NULL)
SELECT 0 as '2015', a16 as '2016', a17 as '2017'
FROM g16, g17
    """).fetchall())
tot_cust_prev_year

"""## New Customers

"""

new_custs = pd.DataFrame(engine.execute("""
WITH 
n15 AS (SELECT customer_email AS cn15 , '2015' AS year_joined FROM pvt_table WHERE [2015] IS NOT NULL),
n16 AS (SELECT customer_email AS cn16 , '2016' AS year_joined FROM pvt_table WHERE [2015] IS NULL AND [2016] IS NOT NULL),
n17 AS (SELECT customer_email AS cn17, '2017' AS year_joined FROM pvt_table WHERE [2016] IS NULL AND [2017] IS NOT NULL)
SELECT cn15 customer_emails, year_joined
FROM n15
UNION ALL
SELECT cn16, year_joined
FROM n16
UNION ALL
SELECT cn17, year_joined
FROM n17
""").fetchall())
new_custs

# The firm gained 605383 new customers from years 2015 to 2017

"""## Lost Customers"""

lost_custs = pd.DataFrame(engine.execute("""
WITH l16 AS (SELECT customer_email AS cl16 , '2016' AS year_left FROM pvt_table WHERE [2015] IS NOT NULL AND [2016] IS NULL),
l17 AS (SELECT customer_email AS cl17, '2017' FROM pvt_table WHERE [2016] IS NOT NULL AND [2017] IS NULL)
SELECT cl16 as customer_email, year_left 
FROM l16
UNION ALL
SELECT cl17, '2017'
FROM l17
""").fetchall())
lost_custs

# The firm has lost 355397 customers in 2016 and 2017 combined

